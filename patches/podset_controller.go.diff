--- pkg/controller/podset/podset_controller.go	2019-08-10 15:13:45.000000000 +1000
+++ pkg/controller/podset/podset_controller.go.v1	2019-08-10 15:13:53.000000000 +1000
@@ -2,14 +2,15 @@
 
 import (
 	"context"
+	"reflect"
 
 	appv1alpha1 "podset-operator/pkg/apis/app/v1alpha1"
 
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/apimachinery/pkg/runtime"
-	"k8s.io/apimachinery/pkg/types"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/controller"
 	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
@@ -65,7 +66,6 @@
 	return nil
 }
 
-// blank assignment to verify that ReconcilePodSet implements reconcile.Reconciler
 var _ reconcile.Reconciler = &ReconcilePodSet{}
 
 // ReconcilePodSet reconciles a PodSet object
@@ -88,8 +88,8 @@
 	reqLogger.Info("Reconciling PodSet")
 
 	// Fetch the PodSet instance
-	instance := &appv1alpha1.PodSet{}
-	err := r.client.Get(context.TODO(), request.NamespacedName, instance)
+	podSet := &appv1alpha1.PodSet{}
+	err := r.client.Get(context.TODO(), request.NamespacedName, podSet)
 	if err != nil {
 		if errors.IsNotFound(err) {
 			// Request object not found, could have been deleted after reconcile request.
@@ -101,45 +101,91 @@
 		return reconcile.Result{}, err
 	}
 
-	// Define a new Pod object
-	pod := newPodForCR(instance)
-
-	// Set PodSet instance as the owner and controller
-	if err := controllerutil.SetControllerReference(instance, pod, r.scheme); err != nil {
+	// List all pods owned by this PodSet instance
+	podList := &corev1.PodList{}
+	lbs := map[string]string{
+		"app":     podSet.Name,
+		"version": "v0.1",
+	}
+	labelSelector := labels.SelectorFromSet(lbs)
+	listOps := &client.ListOptions{Namespace: podSet.Namespace, LabelSelector: labelSelector}
+	if err = r.client.List(context.TODO(), listOps, podList); err != nil {
 		return reconcile.Result{}, err
 	}
 
-	// Check if this Pod already exists
-	found := &corev1.Pod{}
-	err = r.client.Get(context.TODO(), types.NamespacedName{Name: pod.Name, Namespace: pod.Namespace}, found)
-	if err != nil && errors.IsNotFound(err) {
-		reqLogger.Info("Creating a new Pod", "Pod.Namespace", pod.Namespace, "Pod.Name", pod.Name)
-		err = r.client.Create(context.TODO(), pod)
+	// Count the pods that are pending or running as available
+	var available []corev1.Pod
+	for _, pod := range podList.Items {
+		if pod.ObjectMeta.DeletionTimestamp != nil {
+			continue
+		}
+		if pod.Status.Phase == corev1.PodRunning || pod.Status.Phase == corev1.PodPending {
+			available = append(available, pod)
+		}
+	}
+	numAvailable := int32(len(available))
+	availableNames := []string{}
+	for _, pod := range available {
+		availableNames = append(availableNames, pod.ObjectMeta.Name)
+	}
+
+	// Update the status if necessary
+	status := appv1alpha1.PodSetStatus{
+		PodNames: availableNames,
+	}
+	if !reflect.DeepEqual(podSet.Status, status) {
+		podSet.Status = status
+		err = r.client.Status().Update(context.TODO(), podSet)
 		if err != nil {
+			reqLogger.Error(err, "Failed to update PodSet status")
 			return reconcile.Result{}, err
 		}
+	}
 
-		// Pod created successfully - don't requeue
-		return reconcile.Result{}, nil
-	} else if err != nil {
-		return reconcile.Result{}, err
+	if numAvailable > podSet.Spec.Replicas {
+		reqLogger.Info("Scaling down pods", "Currently available", numAvailable, "Required replicas", podSet.Spec.Replicas)
+		diff := numAvailable - podSet.Spec.Replicas
+		dpods := available[:diff]
+		for _, dpod := range dpods {
+			err = r.client.Delete(context.TODO(), &dpod)
+			if err != nil {
+				reqLogger.Error(err, "Failed to delete pod", "pod.name", dpod.Name)
+				return reconcile.Result{}, err
+			}
+		}
+		return reconcile.Result{Requeue: true}, nil
+	}
+
+	if numAvailable < podSet.Spec.Replicas {
+		reqLogger.Info("Scaling up pods", "Currently available", numAvailable, "Required replicas", podSet.Spec.Replicas)
+		// Define a new Pod object
+		pod := newPodForCR(podSet)
+		// Set PodSet instance as the owner and controller
+		if err := controllerutil.SetControllerReference(podSet, pod, r.scheme); err != nil {
+			return reconcile.Result{}, err
+		}
+		err = r.client.Create(context.TODO(), pod)
+		if err != nil {
+			reqLogger.Error(err, "Failed to create pod", "pod.name", pod.Name)
+			return reconcile.Result{}, err
+		}
+		return reconcile.Result{Requeue: true}, nil
 	}
 
-	// Pod already exists - don't requeue
-	reqLogger.Info("Skip reconcile: Pod already exists", "Pod.Namespace", found.Namespace, "Pod.Name", found.Name)
 	return reconcile.Result{}, nil
 }
 
 // newPodForCR returns a busybox pod with the same name/namespace as the cr
 func newPodForCR(cr *appv1alpha1.PodSet) *corev1.Pod {
 	labels := map[string]string{
-		"app": cr.Name,
+		"app":     cr.Name,
+		"version": "v0.1",
 	}
 	return &corev1.Pod{
 		ObjectMeta: metav1.ObjectMeta{
-			Name:      cr.Name + "-pod",
-			Namespace: cr.Namespace,
-			Labels:    labels,
+			GenerateName: cr.Name + "-pod",
+			Namespace:    cr.Namespace,
+			Labels:       labels,
 		},
 		Spec: corev1.PodSpec{
 			Containers: []corev1.Container{
